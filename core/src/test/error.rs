use std::convert::Infallible;
use std::error::Error as StdError;
use std::fmt::{self, Display};
use std::io;
use std::result;

use thiserror::Error;

/// Errors than can occur while parsing the response from the server.
#[derive(Debug)]
pub enum InvalidResponseKind {
    /// Invalid or missing Location header in redirection
    LocationHeader,
    /// Invalid redirection URL
    RedirectionUrl,
    /// Status line
    StatusLine,
    /// Status code
    StatusCode,
    /// Error parsing header
    Header,
    /// Error decoding chunk size
    ChunkSize,
    /// Error decoding chunk
    Chunk,
    /// Invalid Content-Length header
    ContentLength,
}

impl Display for InvalidResponseKind {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        use InvalidResponseKind::*;

        match self {
            LocationHeader => write!(f, "missing or invalid location header"),
            RedirectionUrl => write!(f, "invalid redirection url"),
            StatusLine => write!(f, "invalid status line"),
            StatusCode => write!(f, "invalid status code"),
            Header => write!(f, "invalid header"),
            ChunkSize => write!(f, "invalid chunk size"),
            Chunk => write!(f, "invalid chunk"),
            ContentLength => write!(f, "invalid content length"),
        }
    }
}

/// A type that contains all the errors that can possibly occur while accessing an HTTP server.
#[derive(Error, Debug)]
pub enum Error {
    /// Could not connect to proxy with CONNECT method.
    #[error("Could not connect to proxy with CONNECT method.")]
    ConnectError {
        /// Status code from the proxy.
        status_code: http::StatusCode,
        /// Up to 10 KiB of body data from the proxy which might help diagnose the error.
        body: Vec<u8>,
    },
    /// Error generated by the `http` crate.
    #[error("Error generated by the http crate.")]
    Http(http::Error),
    /// IO Error
    #[error("IO Error")]
    Io(io::Error),
    /// Invalid URL given to the Request.
    #[error("Invalid URL given to the Request.")]
    InvalidUrl,
    /// Invalid request HeaderValue.
    #[error("Invalid request HeaderValue.")]
    InvalidHeaderValue(#[from] http::header::InvalidHeaderValue),
    /// An URL with an invalid host was found while processing the request.
    #[error("An URL with an invalid host was found while processing the request.")]
    InvalidUrlHost,
    /// The URL scheme is unknown and the port is missing.
    #[error("The URL scheme is unknown and the port is missing.")]
    InvalidUrlPort,
    /// Server sent an invalid response.
    #[error("Server sent an invalid response.")]
    InvalidResponse(InvalidResponseKind),
    /// Too many redirections
    #[error("Too many redirections")]
    TooManyRedirections,
    /// Status code indicates failure.
    #[error("Status code indicates failure.")]
    StatusCode(#[from] http::StatusCode),
    /// JSON decoding/encoding error.
    #[error("JSON decoding/encoding error.")]
    Json(#[from] serde_json::Error),
    /// Form-URL encoding error.
    #[error("Form-URL encoding error")]
    UrlEncoded(#[from] serde_urlencoded::ser::Error),
    /// Invalid mime type in a Multipart form.
    #[error("Invalid mime type in a Multipart form")]
    InvalidMimeType(String),
}

/// Wrapper for the `Result` type with an `Error`.
pub type Result<T = ()> = result::Result<T, Error>;
